<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== -->
<!--                                                                        -->
<!-- Generated by Maven Help Plugin on 2019-11-25T20:10:59+08:00            -->
<!-- See: http://maven.apache.org/plugins/maven-help-plugin/                -->
<!--                                                                        -->
<!-- ====================================================================== -->
<!-- ====================================================================== -->
<!--                                                                        -->
<!-- Effective POM for project                                              -->
<!-- 'com.companyname.project-group:project:jar:1.0'                        -->
<!--                                                                        -->
<!-- ====================================================================== -->

<!-- 通过mvn help:effective-pom 获取的一个pom文件 -->
<!-- 文件约束 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 这个版本是pom文件的版本不同版本可能由不同的解析，这里声明了版本，则mvn会按照这个版本来解析pom-->
  <modelVersion>4.0.0</modelVersion>
<!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app 。应该是描述当前项目吧。 -->
  <groupId>com.companyname.project-group</groupId>
<!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 
        特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 和groupId一起做为一个联合主键-->
  <artifactId>project</artifactId>
<!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
  <version>1.0</version>
<!--发现依赖和扩展的远程仓库列表。 -->
  <repositories>
<!--包含需要连接到远程仓库的信息 -->
    <repository>
<!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 -->
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
<!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 -->
      <id>central</id>
<!--远程仓库名称 -->
      <name>Central Repository</name>
<!--远程仓库URL，按protocol://hostname/path形式 -->
      <url>https://repo.maven.apache.org/maven2</url>
    </repository>
<!--发现插件的远程仓库列表，这些插件用于构建和报表 -->
  <pluginRepositories>
<!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 -->
    <pluginRepository>
<!--如何处理远程仓库里发布版本的下载 -->
      <releases>
<!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 -->
        <updatePolicy>never</updatePolicy>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>central</id>
      <name>Central Repository</name>
      <url>https://repo.maven.apache.org/maven2</url>
    </pluginRepository>
  </pluginRepositories>
<!--构建项目需要的信息 -->
  <build>
<!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->
    <sourceDirectory>/Users/lipengyang/Desktop/git/note/MVN/project/src/main/java</sourceDirectory>
<!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 -->
    <scriptSourceDirectory>/Users/lipengyang/Desktop/git/note/MVN/project/src/main/scripts</scriptSourceDirectory>
<!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->
    <testSourceDirectory>/Users/lipengyang/Desktop/git/note/MVN/project/src/test/java</testSourceDirectory>
<!--被编译过的应用程序class文件存放的目录。 -->
    <outputDirectory>/Users/lipengyang/Desktop/git/note/MVN/project/target/classes</outputDirectory>
<!--被编译过的测试class文件存放的目录。 -->
    <testOutputDirectory>/Users/lipengyang/Desktop/git/note/MVN/project/target/test-classes</testOutputDirectory>
<!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 -->
    <resources>
<!--这个元素描述了项目相关或测试相关的所有资源路径 -->
      <resource>
<!--描述存放资源的目录，该路径相对POM路径 -->
        <directory>/Users/lipengyang/Desktop/git/note/MVN/project/src/main/resources</directory>
      </resource>
    </resources>
<!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 -->
    <testResources>
<!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 -->
      <testResource>
<!--构建产生的所有文件存放的目录 -->
        <directory>/Users/lipengyang/Desktop/git/note/MVN/project/src/test/resources</directory>
      </testResource>
    </testResources>
<!--构建产生的所有文件存放的目录 -->
    <directory>/Users/lipengyang/Desktop/git/note/MVN/project/target</directory>
<!--产生的构件的文件名，默认值是${artifactId}-${version}。 -->
    <finalName>project-1.0</finalName>
<!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 -->
    <pluginManagement>
<!--使用的插件列表 。 -->
      <plugins>
<!--plugin元素包含描述插件所需要的信息。 -->
        <plugin>
<!--插件在仓库里的artifact ID -->
          <artifactId>maven-antrun-plugin</artifactId>
<!--被使用的插件的版本（或版本范围） -->
          <version>1.3</version>
        </plugin>
        <plugin>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>2.2-beta-5</version>
        </plugin>
        <plugin>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>2.8</version>
        </plugin>
        <plugin>
          <artifactId>maven-release-plugin</artifactId>
          <version>2.3.2</version>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
<!--插件在仓库里的artifact ID -->
        <artifactId>maven-clean-plugin</artifactId>
<!--被使用的插件的版本（或版本范围） -->
        <version>2.5</version>
<!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 -->
        <executions>
<!--execution元素包含了插件执行需要的信息 -->
          <execution>
<!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 -->
            <id>default-clean</id>
<!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 -->
            <phase>clean</phase>
<!--配置的执行目标 -->
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <executions>
          <execution>
            <id>default-testResources</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testResources</goal>
            </goals>
          </execution>
          <execution>
            <id>default-resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>resources</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.4</version>
        <executions>
          <execution>
            <id>default-jar</id>
            <phase>package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <executions>
          <execution>
            <id>default-compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>default-testCompile</id>
            <phase>test-compile</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.12.4</version>
        <executions>
          <execution>
            <id>default-test</id>
            <phase>test</phase>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-install-plugin</artifactId>
        <version>2.4</version>
        <executions>
          <execution>
            <id>default-install</id>
            <phase>install</phase>
            <goals>
              <goal>install</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>2.7</version>
        <executions>
          <execution>
            <id>default-deploy</id>
            <phase>deploy</phase>
            <goals>
              <goal>deploy</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.3</version>
        <executions>
          <execution>
            <id>default-site</id>
            <phase>site</phase>
            <goals>
              <goal>site</goal>
            </goals>
<!--作为DOM对象的配置 -->
            <configuration>
<!--输出目录。 -->
              <outputDirectory>/Users/lipengyang/Desktop/git/note/MVN/project/target/site</outputDirectory>
              <reportPlugins>
                <reportPlugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-project-info-reports-plugin</artifactId>
                </reportPlugin>
              </reportPlugins>
            </configuration>
          </execution>
          <execution>
            <id>default-deploy</id>
            <phase>site-deploy</phase>
            <goals>
              <goal>deploy</goal>
            </goals>
            <configuration>
              <outputDirectory>/Users/lipengyang/Desktop/git/note/MVN/project/target/site</outputDirectory>
              <reportPlugins>
                <reportPlugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-project-info-reports-plugin</artifactId>
                </reportPlugin>
              </reportPlugins>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <outputDirectory>/Users/lipengyang/Desktop/git/note/MVN/project/target/site</outputDirectory>
          <reportPlugins>
            <reportPlugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-project-info-reports-plugin</artifactId>
            </reportPlugin>
          </reportPlugins>
        </configuration>
      </plugin>
    </plugins>
  </build>
<!--该元素包括使用报表插件产生报表的规范。当用户执行"mvn site"，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 -->
  <reporting>
    <outputDirectory>/Users/lipengyang/Desktop/git/note/MVN/project/target/site</outputDirectory>
  </reporting>
</project>

